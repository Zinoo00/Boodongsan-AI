
services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15
    container_name: boodongsan_postgres
    environment:
      POSTGRES_DB: boodongsan
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - boodongsan_network

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: boodongsan_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - boodongsan_network

  # FastAPI 백엔드
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: boodongsan_backend
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=boodongsan
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/app
      - /app/.venv
    networks:
      - boodongsan_network
    command: uv run granian --interface asgi api.main:app --host 0.0.0.0 --port 8000 --reload

  # React 프론트엔드 (향후 구현)
  frontend:
    build:
      context: ../frontend/web
      dockerfile: Dockerfile
    container_name: boodongsan_frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ../frontend/web:/app
      - /app/node_modules
    networks:
      - boodongsan_network
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
    profiles:
      - frontend

volumes:
  postgres_data:
  redis_data:

networks:
  boodongsan_network:
    driver: bridge
