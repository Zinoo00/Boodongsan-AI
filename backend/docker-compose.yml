services:
  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: boodongsan_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - boodongsan_network

  # Chromadb (shared vector DB)
  chroma:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: boodongsan_chroma
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma
    networks:
      - boodongsan_network

  # FastAPI 백엔드
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: boodongsan_backend
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SUPABASE_DB_PASSWORD=${SUPABASE_DB_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
      - CHROMADB_HOST=chroma
      - CHROMADB_PORT=8000
      - AWS_REGION=ap-northeast-2
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - chroma
    volumes:
      - .:/app
      - venv_data:/app/.venv
    networks:
      - boodongsan_network
    command: uv run uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload

  # React 프론트엔드 (향후 구현)
  frontend:
    build:
      context: ../frontend/web
      dockerfile: Dockerfile
    container_name: boodongsan_frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ../frontend/web:/app
      - /app/node_modules
    networks:
      - boodongsan_network
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
    profiles:
      - frontend

volumes:
  redis_data:
  chroma_data:
  venv_data:

networks:
  boodongsan_network:
    driver: bridge
