# ==============================================================================
# Korean Real Estate RAG AI Chatbot - Environment Configuration
# ==============================================================================

# ------------------------------------------------------------------------------
# APPLICATION SETTINGS
# ------------------------------------------------------------------------------

# Application Environment (development, staging, production)
ENVIRONMENT=development
DEBUG=true

# Application Metadata (optional - has defaults)
# APP_NAME="Korean Real Estate RAG AI Chatbot"
# APP_VERSION="1.0.0"
# API_V1_STR="/api/v1"

# Application Secret (auto-generated if not set - MUST be set for production)
# SECRET_KEY=your_32_character_secret_key_here

# ------------------------------------------------------------------------------
# SECURITY & AUTHENTICATION (OPTIONAL - for future JWT implementation)
# ------------------------------------------------------------------------------

# JWT Signing Keys - Auto-generated if not set (implement when authentication is needed)
# JWT_SECRET_KEY=your_32_character_secret_key_here
# JWT_REFRESH_SECRET_KEY=your_32_character_refresh_secret_key_here

# CORS Origins (comma-separated URLs for frontend access)
# BACKEND_CORS_ORIGINS=http://localhost:3000,https://yourdomain.com

# Allowed Hosts for production (comma-separated)
# ALLOWED_HOSTS=yourdomain.com,api.yourdomain.com

# ------------------------------------------------------------------------------
# DATABASE - SUPABASE (REQUIRED)
# ------------------------------------------------------------------------------

# Supabase Configuration - Get these from your Supabase dashboard
SUPABASE_URL=
SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=

# Supabase Postgres DB Password - Get from Project Settings → Database
SUPABASE_DB_PASSWORD=

# Optional: Direct PostgreSQL URL override (not typically needed with Supabase client)
# DATABASE_URL=postgresql+asyncpg://postgres:<DB_PASSWORD>@db.<project-ref>.supabase.co:5432/postgres

# ------------------------------------------------------------------------------
# REDIS CACHE
# ------------------------------------------------------------------------------

# Redis Connection
REDIS_URL=redis://localhost:6379/0
# Production Redis password (set for production deployments)
REDIS_PASSWORD=

# Cache Configuration (optional - has defaults)
# CACHE_TTL=3600

# ------------------------------------------------------------------------------
# VECTOR DATABASES
# ------------------------------------------------------------------------------

# ChromaDB (Primary Vector Store)
CHROMADB_HOST=localhost
CHROMADB_PORT=8000
# CHROMADB_COLLECTION_NAME=korean_real_estate

# Qdrant (Optional - Only if you plan to use Qdrant as vector database)
# QDRANT_URL=https://your-qdrant-instance.com
# QDRANT_API_KEY=your_qdrant_api_key
# QDRANT_COLLECTION_NAME=korean_real_estate

# Vector Configuration (optional - has defaults)
# VECTOR_SIZE=768

# ------------------------------------------------------------------------------
# AI SERVICES - AWS BEDROCK (REQUIRED)
# ------------------------------------------------------------------------------

# AWS Credentials
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_REGION=ap-northeast-2

# Bedrock Model Configuration (optional - can customize)
BEDROCK_MODEL_ID=anthropic.claude-3-sonnet-20240229-v1:0
BEDROCK_EMBEDDING_MODEL_ID=amazon.titan-embed-text-v1

# ------------------------------------------------------------------------------
# AI SERVICES - CLOUDFLARE WORKERS AI (REQUIRED)
# ------------------------------------------------------------------------------

# Cloudflare Credentials
CLOUDFLARE_ACCOUNT_ID=
CLOUDFLARE_API_TOKEN=

# Model Selection (optional - can customize)
CLOUDFLARE_MODEL_NAME=@cf/meta/llama-2-7b-chat-int8

# ------------------------------------------------------------------------------
# KOREAN REAL ESTATE APIS
# ------------------------------------------------------------------------------

# Required APIs
MOLIT_API_KEY=                    # 국토교통부 (Ministry of Land, Infrastructure and Transport)

# Optional APIs
HUG_API_KEY=                      # 주택도시보증공사 (Korea Housing & Urban Guarantee Corporation)
HF_API_KEY=                       # 주택금융공사 (Korea Housing Finance Corporation)

# ------------------------------------------------------------------------------
# SERVER & DEPLOYMENT
# ------------------------------------------------------------------------------

# Server Configuration
HOST=0.0.0.0
PORT=8000
WORKERS=1

# ASGI Server Selection (uvicorn recommended)
# ASGI_SERVER=uvicorn

# Development Settings
RELOAD=false

# ------------------------------------------------------------------------------
# LOGGING & MONITORING
# ------------------------------------------------------------------------------

# Logging Configuration
LOG_LEVEL=INFO
# LOG_FILE_PATH=/path/to/logfile.log

# Metrics & Monitoring (optional)
ENABLE_METRICS=true
# METRICS_PORT=9090

# ------------------------------------------------------------------------------
# PERFORMANCE TUNING (OPTIONAL)
# ------------------------------------------------------------------------------

# Worker Configuration
# MAX_WORKERS=4
# WORKER_TIMEOUT=120

# Database Pool Settings (Supabase handles this, but kept for compatibility)
# DB_POOL_SIZE=10
# DB_MAX_OVERFLOW=20

# Data Collection Settings
# DATA_UPDATE_INTERVAL_HOURS=24
# MAX_CONCURRENT_REQUESTS=10
# REQUEST_TIMEOUT_SECONDS=30

# RAG Configuration
# MAX_SEARCH_RESULTS=10
# SIMILARITY_THRESHOLD=0.7
# MAX_CONTEXT_LENGTH=4000
# RESPONSE_MAX_TOKENS=1000

# File Upload Settings
# UPLOAD_MAX_SIZE=10485760  # 10MB in bytes
# ALLOWED_FILE_TYPES=csv,xlsx,json

# ==============================================================================
# SETUP INSTRUCTIONS
# ==============================================================================

# 1. Copy this file to .env: cp .env.example .env
# 2. Fill in REQUIRED credentials (marked with = and no default value)
# 3. Customize OPTIONAL settings as needed (marked with # prefix)
# 4. For production: Set ENVIRONMENT=production and fill ALL required fields
# 5. Generate JWT keys: python -c "import secrets; print(secrets.token_urlsafe(32))"

# ==============================================================================
# SECURITY NOTES
# ==============================================================================

# - Never commit .env file to version control
# - Use strong, unique values for all secret keys
# - Rotate JWT keys periodically in production
# - Use environment-specific values for each deployment
# - Enable Redis password in production
# - Set specific CORS origins instead of wildcards
